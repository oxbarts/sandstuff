---
import { Icon } from '@astrojs/starlight/components'
import { encrypt } from '~/lib/encrypt.ts'

interface Props {
  password: string
}

const { password } = Astro.props
const slot = await Astro.slots.render('default')

const payload = encrypt(slot, password)
---

<div class="flex flex-col justify-center items-center p-12 md:p-24 border-2 border-accent-200 border-dashed rounded min-h-[50vh] text-center" data-encrypted data-payload={JSON.stringify(payload)}>
  <p class="mb-4">This content is only for friends. Good thing is, when you found this website, we <i>are</i> probably friends.</p>
  <button class="bg-(--sl-color-text-accent) border-(--sl-color-text-accent) text-(--sl-color-black) p-[.9375rem_1.25rem] items-center border rounded-full inline-flex gap-[0.5em] leading-[1.1875] no-underline outline-offset-[0.25rem]">
    <Icon name="seti:license"/>
    Unlock Content
  </button>

</div>

<script>
function base64ToArrayBuffer(b64: string) {
  const bin = window.atob(b64)
  const len = bin.length
  const bytes = new Uint8Array(len)
  for (let i = 0; i < len; i++) bytes[i] = bin.charCodeAt(i)
  return bytes.buffer
}

function arraysEqual(a: Uint8Array, b: Uint8Array) {
  if (a.byteLength !== b.byteLength) return false
  for (let i = 0; i < a.byteLength; i++) if (a[i] !== b[i]) return false
  return true
}

const addEventListeners = () => {
  document?.querySelector('[data-encrypted] > button')?.addEventListener('click', async (event: Event) => {
    const button = event.currentTarget as HTMLButtonElement
    const container = button.parentElement as HTMLDivElement
    if (!container.dataset.payload) {
      return
    }
    const meta = JSON.parse(container.dataset.payload)
    const template = document.createElement('template')

    const password = prompt('Enter password')
    if (!password) {
      return
    }

    try {
      const salt = base64ToArrayBuffer(meta.salt)
      const iv = base64ToArrayBuffer(meta.iv)
      const ciphertext = base64ToArrayBuffer(meta.ciphertext)
      const authTag = base64ToArrayBuffer(meta.authTag)
      const enc = new TextEncoder()
      const passKey = await crypto.subtle.importKey('raw', enc.encode(password), { name: 'PBKDF2' }, false, ['deriveBits', 'deriveKey'])
      const derivedKey = await crypto.subtle.deriveKey({ name: 'PBKDF2', salt, iterations: 100000, hash: 'SHA-256' }, passKey, { name: 'AES-GCM', length: 256 }, true, ['decrypt'])
      const rawKey = await crypto.subtle.exportKey('raw', derivedKey)
      const hash = await crypto.subtle.digest('SHA-256', rawKey)
      if (!arraysEqual(new Uint8Array(hash), new Uint8Array(base64ToArrayBuffer(meta.keyHash)))) {
        alert('Wrong password  ðŸ˜•')
        return
      }
      const combined = new Uint8Array(ciphertext.byteLength + authTag.byteLength)
      combined.set(new Uint8Array(ciphertext), 0)
      combined.set(new Uint8Array(authTag), ciphertext.byteLength)
      const plainBuf = await crypto.subtle.decrypt({ name: 'AES-GCM', iv }, derivedKey, combined)
      const dec = new TextDecoder()
      template.innerHTML = dec.decode(plainBuf)
      container.parentNode?.replaceChild(template.content, container)
    } catch (err) {
      console.error(err)
      alert('Decryption failed ðŸ˜•')
    }

    // const fragment = document.createDocumentFragment()
    // while (target.firstChild) {
    //   fragment.appendChild(target.firstChild)
    // }
    // target.parentNode?.replaceChild(fragment, target)
  }, true)
}

document?.addEventListener('astro:after-swap', addEventListeners)
addEventListeners()
</script>
